package engine.agent;

import transducer.TChannel;
import transducer.TEvent;
import transducer.TReceiver;
import transducer.Transducer;
import engine.agent.Agent;


public class EndSensorEntryAgent extends Agent implements TReceiver{

	public boolean GlassOnSensor;
	public boolean PreviouslyGlassOnSensor;
	public Transducer transducer;
	public ShuttleAgent myshuttle;
	public EndConveyorAgent conveyor;
	public gui.panels.DisplayPanel guiDisplayPanel;
	public int index;
	
	// for main
	public EndSensorEntryAgent(String name){
		super(name);
		GlassOnSensor = false;
		PreviouslyGlassOnSensor = false;
	}
	// for main
	public void setEndSensorEntryAgent(Transducer t, ShuttleAgent s, EndConveyorAgent c, int ind, gui.panels.DisplayPanel gdp){
		transducer = t;
		t.register(this, TChannel.ALL_AGENTS);
		t.register(this, TChannel.SENSOR);
		myshuttle = s;
		conveyor = c;
		this.index = ind;
		this.guiDisplayPanel = gdp;
	}
	// for JUnit test
	public EndSensorEntryAgent(Transducer t, ShuttleAgent s, EndConveyorAgent c){
		GlassOnSensor = false;
		PreviouslyGlassOnSensor = false;
		myshuttle = s;
		conveyor = c;
		transducer = t;
		t.register(this, TChannel.ALL_AGENTS);
		t.register(this, TChannel.SENSOR);
	}

	@Override
	public boolean pickAndExecuteAnAction() {
		if(PreviouslyGlassOnSensor && !GlassOnSensor){
	        AlertShuttle();
	        conveyor.msgGlassOffEntrySensor();
	        PreviouslyGlassOnSensor = GlassOnSensor;
	        return false;
	    }
	    if(!GlassOnSensor){PreviouslyGlassOnSensor = GlassOnSensor; return false;}
	    PreviouslyGlassOnSensor = GlassOnSensor;
	    return true;
	}
	
	public void msgGlassOnSensor(){ //From Transducer
	    GlassOnSensor = true;
	    stateChanged();
	    print("Glass On Sensor");
	}
	public void msgGlassOffSensor(){ //From Transducer
	    GlassOnSensor = false;
	    stateChanged();
	    print("Glass Off Sensor");
	}

	public void AlertShuttle(){
	    //myshuttle.msgOvenConveyorReady()//Lets the Shuttle know when the conveyor is ready for
        //another glass piece
		print("Alerting Shuttle that I'm ready for more glass");
	}
	@Override
	public void eventFired(TChannel channel, TEvent event, Object[] args) {
		// TODO Auto-generated method stub
		if(channel==TChannel.SENSOR && args[0]==(Object)index){
			if(event==TEvent.SENSOR_GUI_PRESSED) this.msgGlassOnSensor();
			if(event==TEvent.SENSOR_GUI_RELEASED) this.msgGlassOffSensor();
		}	
	}
}
